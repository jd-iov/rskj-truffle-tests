<?xml version="1.0" encoding="UTF-8"?>
<testsuites name="Mocha Tests" time="5.7310" tests="100" failures="0">
  <testsuite name="Root Suite" timestamp="2021-09-20T14:05:33" tests="0" time="0.0000" failures="0">
  </testsuite>
  <testsuite name="TestShift" timestamp="2021-09-20T14:05:33" tests="1" time="0.1480" failures="0">
    <testcase name="TestShift testShiftOpcode" time="0.1480" classname="testShiftOpcode">
    </testcase>
  </testsuite>
  <testsuite name="Contract: AltBN128Contracts" timestamp="2021-09-20T14:05:39" tests="0" file="/Users/jjtechera/Documents/GitHub/rskj-truffle-tests/test/basic-tests/AltBN128Tests.js" time="0.0000" failures="0">
  </testsuite>
  <testsuite name="Contract: Add" timestamp="2021-09-20T14:05:39" tests="3" file="/Users/jjtechera/Documents/GitHub/rskj-truffle-tests/test/basic-tests/AltBN128Tests.js" time="0.1870" failures="0">
    <testcase name="Contract: AltBN128Contracts Contract: Add should return the expected sum of two points" time="0.0670" classname="should return the expected sum of two points">
    </testcase>
    <testcase name="Contract: AltBN128Contracts Contract: Add should return zero for the sum of zero points" time="0.0420" classname="should return zero for the sum of zero points">
    </testcase>
    <testcase name="Contract: AltBN128Contracts Contract: Add should return zero for the sum of two big points" time="0.0780" classname="should return zero for the sum of two big points">
    </testcase>
  </testsuite>
  <testsuite name="Contract: Mul" timestamp="2021-09-20T14:05:39" tests="3" file="/Users/jjtechera/Documents/GitHub/rskj-truffle-tests/test/basic-tests/AltBN128Tests.js" time="0.1740" failures="0">
    <testcase name="Contract: AltBN128Contracts Contract: Mul should return true multiply scalar and point" time="0.0750" classname="should return true multiply scalar and point">
    </testcase>
    <testcase name="Contract: AltBN128Contracts Contract: Mul should return identity when multiplied by scalar value one" time="0.0450" classname="should return identity when multiplied by scalar value one">
    </testcase>
    <testcase name="Contract: AltBN128Contracts Contract: Mul should return true multiply point by scalar" time="0.0540" classname="should return true multiply point by scalar">
    </testcase>
  </testsuite>
  <testsuite name="Contract: Pairing" timestamp="2021-09-20T14:05:40" tests="3" file="/Users/jjtechera/Documents/GitHub/rskj-truffle-tests/test/basic-tests/AltBN128Tests.js" time="0.8740" failures="0">
    <testcase name="Contract: AltBN128Contracts Contract: Pairing should return true for empty input" time="0.0590" classname="should return true for empty input">
    </testcase>
    <testcase name="Contract: AltBN128Contracts Contract: Pairing should return false for invalid pairing input" time="0.2040" classname="should return false for invalid pairing input">
    </testcase>
    <testcase name="Contract: AltBN128Contracts Contract: Pairing should return true for valid pairing of big big input" time="0.6110" classname="should return true for valid pairing of big big input">
    </testcase>
  </testsuite>
  <testsuite name="Contract: Recursive" timestamp="2021-09-20T14:05:41" tests="0" file="/Users/jjtechera/Documents/GitHub/rskj-truffle-tests/test/basic-tests/Recursive.test.js" time="0.0000" failures="0">
  </testsuite>
  <testsuite name="Verify Recursive" timestamp="2021-09-20T14:05:41" tests="1" file="/Users/jjtechera/Documents/GitHub/rskj-truffle-tests/test/basic-tests/Recursive.test.js" time="0.2180" failures="0">
    <testcase name="Contract: Recursive Verify Recursive Should complete recursive call" time="0.2180" classname="Should complete recursive call">
    </testcase>
  </testsuite>
  <testsuite name="Contract: RecursiveParent" timestamp="2021-09-20T14:05:41" tests="0" file="/Users/jjtechera/Documents/GitHub/rskj-truffle-tests/test/basic-tests/RecursiveParent.js" time="0.0000" failures="0">
  </testsuite>
  <testsuite name="Call recursive contract" timestamp="2021-09-20T14:05:41" tests="2" file="/Users/jjtechera/Documents/GitHub/rskj-truffle-tests/test/basic-tests/RecursiveParent.js" time="0.2770" failures="0">
    <testcase name="Contract: RecursiveParent Call recursive contract Using 400 levels of recursion" time="0.2710" classname="Using 400 levels of recursion">
    </testcase>
    <testcase name="Contract: RecursiveParent Call recursive contract Using 401 levels of recursion the transaction should be reverted" time="0.0060" classname="Using 401 levels of recursion the transaction should be reverted">
    </testcase>
  </testsuite>
  <testsuite name="Contract: Sample" timestamp="2021-09-20T14:05:42" tests="0" file="/Users/jjtechera/Documents/GitHub/rskj-truffle-tests/test/basic-tests/Simple.test.js" time="0.0000" failures="0">
  </testsuite>
  <testsuite name="Sample.sol" timestamp="2021-09-20T14:05:43" tests="1" file="/Users/jjtechera/Documents/GitHub/rskj-truffle-tests/test/basic-tests/Simple.test.js" time="0.0000" failures="0">
    <testcase name="Contract: Sample Sample.sol Should pass all checks and complete process" time="0.0000" classname="Should pass all checks and complete process">
    </testcase>
  </testsuite>
  <testsuite name="Contract: ChainID" timestamp="2021-09-20T14:05:43" tests="1" file="/Users/jjtechera/Documents/GitHub/rskj-truffle-tests/test/basic-tests/TestChainID.js" time="0.0560" failures="0">
    <testcase name="Contract: ChainID Should return correct chain ID" time="0.0560" classname="Should return correct chain ID">
    </testcase>
  </testsuite>
  <testsuite name="Contract: Create2" timestamp="2021-09-20T14:05:43" tests="2" file="/Users/jjtechera/Documents/GitHub/rskj-truffle-tests/test/basic-tests/TestCreate2.js" time="0.1950" failures="0">
    <testcase name="Contract: Create2 Contract should be deployed and addresses should match" time="0.1240" classname="Contract should be deployed and addresses should match">
    </testcase>
    <testcase name="Contract: Create2 Duplicated contract should not be created" time="0.0710" classname="Duplicated contract should not be created">
    </testcase>
  </testsuite>
  <testsuite name="Contract: Selfbalance" timestamp="2021-09-20T14:05:43" tests="2" file="/Users/jjtechera/Documents/GitHub/rskj-truffle-tests/test/basic-tests/TestSelfbalance.js" time="0.1500" failures="0">
    <testcase name="Contract: Selfbalance Should be correct balance" time="0.1000" classname="Should be correct balance">
    </testcase>
    <testcase name="Contract: Selfbalance Should be same as balance" time="0.0500" classname="Should be same as balance">
    </testcase>
  </testsuite>
  <testsuite name="Contract: Blake2bTest" timestamp="2021-09-20T14:05:44" tests="7" file="/Users/jjtechera/Documents/GitHub/rskj-truffle-tests/test/blake2/TestBlake.js" time="1.4680" failures="0">
    <testcase name="Contract: Blake2bTest smoke" time="0.0070" classname="smoke">
    </testcase>
    <testcase name="Contract: Blake2bTest eip-152 test vector 5" time="0.0070" classname="eip-152 test vector 5">
    </testcase>
    <testcase name="Contract: Blake2bTest blake2b reftest (8 bytes input)" time="0.0050" classname="blake2b reftest (8 bytes input)">
    </testcase>
    <testcase name="Contract: Blake2bTest blake2b reftest (25 bytes input)" time="0.0050" classname="blake2b reftest (25 bytes input)">
    </testcase>
    <testcase name="Contract: Blake2bTest blake2b reftest (255 bytes input)" time="0.0050" classname="blake2b reftest (255 bytes input)">
    </testcase>
    <testcase name="Contract: Blake2bTest equihash n=200 k=9 synthethic" time="0.1170" classname="equihash n=200 k=9 synthethic">
    </testcase>
    <testcase name="Contract: Blake2bTest blake2b reference test vectors" time="1.3220" classname="blake2b reference test vectors">
    </testcase>
  </testsuite>
  <testsuite name="Contract: EXTCODEHASH" timestamp="2021-09-20T14:05:45" tests="6" file="/Users/jjtechera/Documents/GitHub/rskj-truffle-tests/test/extcodehash/testExtCodeHash.js" time="0.3380" failures="0">
    <testcase name="Contract: EXTCODEHASH The EXTCODEHASH of an account that selfdestructed in the current transaction" time="0.0570" classname="The EXTCODEHASH of an account that selfdestructed in the current transaction">
    </testcase>
    <testcase name="Contract: EXTCODEHASH The EXTCODEHASH of an account that selfdestructed in different txs" time="0.0370" classname="The EXTCODEHASH of an account that selfdestructed in different txs">
    </testcase>
    <testcase name="Contract: EXTCODEHASH The EXTCODEHASH of an account that selfdestructed and later the selfdestruct has been reverted." time="0.0440" classname="The EXTCODEHASH of an account that selfdestructed and later the selfdestruct has been reverted.">
    </testcase>
    <testcase name="Contract: EXTCODEHASH The EXTCODEHASH of an account created in the current tx" time="0.0510" classname="The EXTCODEHASH of an account created in the current tx">
    </testcase>
    <testcase name="Contract: EXTCODEHASH The EXTCODEHASH of an account that firstly does not exist and later is empty" time="0.0840" classname="The EXTCODEHASH of an account that firstly does not exist and later is empty">
    </testcase>
    <testcase name="Contract: EXTCODEHASH The EXTCODEHASH of an account that has been newly create and later the creation has been reverted" time="0.0650" classname="The EXTCODEHASH of an account that has been newly create and later the creation has been reverted">
    </testcase>
  </testsuite>
  <testsuite name="Contract: FirstTest" timestamp="2021-09-20T14:05:47" tests="0" file="/Users/jjtechera/Documents/GitHub/rskj-truffle-tests/test/TestIsRSK.js" time="0.0000" failures="0">
  </testsuite>
  <testsuite name="Verify is RSK" timestamp="2021-09-20T14:05:47" tests="1" file="/Users/jjtechera/Documents/GitHub/rskj-truffle-tests/test/TestIsRSK.js" time="0.0020" failures="0">
    <testcase name="Contract: FirstTest Verify is RSK Network should be RSK" time="0.0020" classname="Network should be RSK">
    </testcase>
  </testsuite>
  <testsuite name="Contract: BlockRecorder" timestamp="2021-09-20T14:05:47" tests="3" file="/Users/jjtechera/Documents/GitHub/rskj-truffle-tests/test/token-bridge/BlockRecorder_test.js" time="0.1570" failures="0">
    <testcase name="Contract: BlockRecorder retrieve unknown block data" time="0.0230" classname="retrieve unknown block data">
    </testcase>
    <testcase name="Contract: BlockRecorder record block" time="0.0720" classname="record block">
    </testcase>
    <testcase name="Contract: BlockRecorder record block 2" time="0.0620" classname="record block 2">
    </testcase>
  </testsuite>
  <testsuite name="Contract: Emitter" timestamp="2021-09-20T14:05:47" tests="1" file="/Users/jjtechera/Documents/GitHub/rskj-truffle-tests/test/token-bridge/Emitter_test.js" time="0.0480" failures="0">
    <testcase name="Contract: Emitter Emit events" time="0.0480" classname="Emit events">
    </testcase>
  </testsuite>
  <testsuite name="Contract: ProofLibrary" timestamp="2021-09-20T14:05:48" tests="5" file="/Users/jjtechera/Documents/GitHub/rskj-truffle-tests/test/token-bridge/ProofLibrary_test.js" time="0.0230" failures="0">
    <testcase name="Contract: ProofLibrary check one prefix and sufix" time="0.0040" classname="check one prefix and sufix">
    </testcase>
    <testcase name="Contract: ProofLibrary check two prefixes and sufixes" time="0.0060" classname="check two prefixes and sufixes">
    </testcase>
    <testcase name="Contract: ProofLibrary check transaction receipt proof" time="0.0040" classname="check transaction receipt proof">
    </testcase>
    <testcase name="Contract: ProofLibrary check transaction receipt proof calculating prefixes, suffixes" time="0.0040" classname="check transaction receipt proof calculating prefixes, suffixes">
    </testcase>
    <testcase name="Contract: ProofLibrary check transaction receipt 2 proof calculating prefixes, suffixes" time="0.0050" classname="check transaction receipt 2 proof calculating prefixes, suffixes">
    </testcase>
  </testsuite>
  <testsuite name="Contract: ReceiptProver" timestamp="2021-09-20T14:05:48" tests="1" file="/Users/jjtechera/Documents/GitHub/rskj-truffle-tests/test/token-bridge/ReceiptProver_test.js" time="0.0380" failures="0">
    <testcase name="Contract: ReceiptProver prove receipt in block" time="0.0380" classname="prove receipt in block">
    </testcase>
  </testsuite>
  <testsuite name="Contract: RlpLibrary" timestamp="2021-09-20T14:05:48" tests="38" file="/Users/jjtechera/Documents/GitHub/rskj-truffle-tests/test/token-bridge/RlpLibrary_test.js" time="0.4240" failures="0">
    <testcase name="Contract: RlpLibrary get RLP item from encoded empty array" time="0.0110" classname="get RLP item from encoded empty array">
    </testcase>
    <testcase name="Contract: RlpLibrary get RLP item with one byte" time="0.0030" classname="get RLP item with one byte">
    </testcase>
    <testcase name="Contract: RlpLibrary get RLP item with two bytes" time="0.0030" classname="get RLP item with two bytes">
    </testcase>
    <testcase name="Contract: RlpLibrary get RLP item with 56 bytes" time="0.0040" classname="get RLP item with 56 bytes">
    </testcase>
    <testcase name="Contract: RlpLibrary get RLP item with 1024 bytes" time="0.0030" classname="get RLP item with 1024 bytes">
    </testcase>
    <testcase name="Contract: RlpLibrary get RLP item with 1024 bytes using offset" time="0.0050" classname="get RLP item with 1024 bytes using offset">
    </testcase>
    <testcase name="Contract: RlpLibrary get total length 1 from encoded empty array" time="0.0060" classname="get total length 1 from encoded empty array">
    </testcase>
    <testcase name="Contract: RlpLibrary get total length 1 from encoded empty array using offset" time="0.0070" classname="get total length 1 from encoded empty array using offset">
    </testcase>
    <testcase name="Contract: RlpLibrary get total length 1" time="0.0050" classname="get total length 1">
    </testcase>
    <testcase name="Contract: RlpLibrary get total length 1 using offset" time="0.0090" classname="get total length 1 using offset">
    </testcase>
    <testcase name="Contract: RlpLibrary get length 0" time="0.0040" classname="get length 0">
    </testcase>
    <testcase name="Contract: RlpLibrary get length 0 using offset" time="0.0030" classname="get length 0 using offset">
    </testcase>
    <testcase name="Contract: RlpLibrary get length 1" time="0.0020" classname="get length 1">
    </testcase>
    <testcase name="Contract: RlpLibrary get length 1 using offset" time="0.0040" classname="get length 1 using offset">
    </testcase>
    <testcase name="Contract: RlpLibrary process encoded empty array" time="0.0160" classname="process encoded empty array">
    </testcase>
    <testcase name="Contract: RlpLibrary process encoded one byte array" time="0.0140" classname="process encoded one byte array">
    </testcase>
    <testcase name="Contract: RlpLibrary process encoded two byte array" time="0.0070" classname="process encoded two byte array">
    </testcase>
    <testcase name="Contract: RlpLibrary process encoded 56 bytes array" time="0.0080" classname="process encoded 56 bytes array">
    </testcase>
    <testcase name="Contract: RlpLibrary process encoded 1024 bytes array" time="0.0120" classname="process encoded 1024 bytes array">
    </testcase>
    <testcase name="Contract: RlpLibrary process encoded 256*256 bytes array" time="0.0600" classname="process encoded 256*256 bytes array">
    </testcase>
    <testcase name="Contract: RlpLibrary process encoded 2*256*256 bytes array" time="0.0140" classname="process encoded 2*256*256 bytes array">
    </testcase>
    <testcase name="Contract: RlpLibrary get total length simple list with two short items" time="0.0150" classname="get total length simple list with two short items">
    </testcase>
    <testcase name="Contract: RlpLibrary get length simple list with two short items" time="0.0030" classname="get length simple list with two short items">
    </testcase>
    <testcase name="Contract: RlpLibrary get offset simple list with two short items" time="0.0100" classname="get offset simple list with two short items">
    </testcase>
    <testcase name="Contract: RlpLibrary process list with one tiny item" time="0.0110" classname="process list with one tiny item">
    </testcase>
    <testcase name="Contract: RlpLibrary process list with one short item" time="0.0100" classname="process list with one short item">
    </testcase>
    <testcase name="Contract: RlpLibrary process list with one not so short item" time="0.0190" classname="process list with one not so short item">
    </testcase>
    <testcase name="Contract: RlpLibrary process list with two not so short items" time="0.0170" classname="process list with two not so short items">
    </testcase>
    <testcase name="Contract: RlpLibrary process list with two not so short items using offset" time="0.0240" classname="process list with two not so short items using offset">
    </testcase>
    <testcase name="Contract: RlpLibrary get items from block1" time="0.0070" classname="get items from block1">
    </testcase>
    <testcase name="Contract: RlpLibrary get items from block2" time="0.0080" classname="get items from block2">
    </testcase>
    <testcase name="Contract: RlpLibrary get items from receipt1" time="0.0100" classname="get items from receipt1">
    </testcase>
    <testcase name="Contract: RlpLibrary get items from receipt2" time="0.0250" classname="get items from receipt2">
    </testcase>
    <testcase name="Contract: RlpLibrary get items from receipt3" time="0.0510" classname="get items from receipt3">
    </testcase>
    <testcase name="Contract: RlpLibrary get two bytes" time="0.0030" classname="get two bytes">
    </testcase>
    <testcase name="Contract: RlpLibrary get forty bytes" time="0.0040" classname="get forty bytes">
    </testcase>
    <testcase name="Contract: RlpLibrary get address from bytes" time="0.0040" classname="get address from bytes">
    </testcase>
    <testcase name="Contract: RlpLibrary get bytes32 from bytes" time="0.0030" classname="get bytes32 from bytes">
    </testcase>
  </testsuite>
  <testsuite name="Contract: RRC20" timestamp="2021-09-20T14:05:50" tests="18" file="/Users/jjtechera/Documents/GitHub/rskj-truffle-tests/test/token/rrc20/rrc20.js" time="0.8270" failures="0">
    <testcase name="Contract: RRC20 Creation: Should create an initial balance of 10000 for the creator" time="0.0250" classname="Creation: Should create an initial balance of 10000 for the creator">
    </testcase>
    <testcase name="Contract: RRC20 Creation: Test correct setting of vanity information" time="0.0060" classname="Creation: Test correct setting of vanity information">
    </testcase>
    <testcase name="Contract: RRC20 Creation: Should succeed in creating over 2^256 - 1 (max) tokens" time="0.0310" classname="Creation: Should succeed in creating over 2^256 - 1 (max) tokens">
    </testcase>
    <testcase name="Contract: RRC20 Transfers: Transfer should be reversed." time="0.0590" classname="Transfers: Transfer should be reversed.">
    </testcase>
    <testcase name="Contract: RRC20 Transfers: Should transfer 10000 to accounts[1] with accounts[0] having 10000" time="0.0490" classname="Transfers: Should transfer 10000 to accounts[1] with accounts[0] having 10000">
    </testcase>
    <testcase name="Contract: RRC20 Transfers: Should fail when trying to transfer 10001 to accounts[1] with accounts[0] having 10000" time="0.0050" classname="Transfers: Should fail when trying to transfer 10001 to accounts[1] with accounts[0] having 10000">
    </testcase>
    <testcase name="Contract: RRC20 Transfers: Should handle zero-transfers normally" time="0.0030" classname="Transfers: Should handle zero-transfers normally">
    </testcase>
    <testcase name="Contract: RRC20 Approvals: msg.sender should approve 100 to accounts[1]" time="0.0420" classname="Approvals: msg.sender should approve 100 to accounts[1]">
    </testcase>
    <testcase name="Contract: RRC20 Approvals: msg.sender approves accounts[1] of 100 &amp; withdraws 20 once." time="0.0640" classname="Approvals: msg.sender approves accounts[1] of 100 &amp; withdraws 20 once.">
    </testcase>
    <testcase name="Contract: RRC20 Approvals: msg.sender approves accounts[1] of 100 &amp; withdraws 20 twice." time="0.1190" classname="Approvals: msg.sender approves accounts[1] of 100 &amp; withdraws 20 twice.">
    </testcase>
    <testcase name="Contract: RRC20 Approvals: msg.sender approves accounts[1] of 100 &amp; withdraws 50 &amp; 60 (2nd tx should fail)" time="0.0840" classname="Approvals: msg.sender approves accounts[1] of 100 &amp; withdraws 50 &amp; 60 (2nd tx should fail)">
    </testcase>
    <testcase name="Contract: RRC20 Approvals: Attempt withdrawal from account with no allowance (should fail)" time="0.0050" classname="Approvals: Attempt withdrawal from account with no allowance (should fail)">
    </testcase>
    <testcase name="Contract: RRC20 Approvals: Allow accounts[1] 100 to withdraw from accounts[0]. Withdraw 60 and then approve 0 &amp; attempt transfer." time="0.1110" classname="Approvals: Allow accounts[1] 100 to withdraw from accounts[0]. Withdraw 60 and then approve 0 &amp; attempt transfer.">
    </testcase>
    <testcase name="Contract: RRC20 Approvals: Approve max (2^256 - 1)" time="0.0650" classname="Approvals: Approve max (2^256 - 1)">
    </testcase>
    <testcase name="Contract: RRC20 Approvals: msg.sender approves accounts[1] of max (2^256 - 1) &amp; withdraws 20" time="0.0580" classname="Approvals: msg.sender approves accounts[1] of max (2^256 - 1) &amp; withdraws 20">
    </testcase>
    <testcase name="Contract: RRC20 Events: Should fire Transfer event properly" time="0.0280" classname="Events: Should fire Transfer event properly">
    </testcase>
    <testcase name="Contract: RRC20 Events: Should fire Transfer event normally on a zero transfer" time="0.0540" classname="Events: Should fire Transfer event normally on a zero transfer">
    </testcase>
    <testcase name="Contract: RRC20 Events: Should fire Approval event properly" time="0.0190" classname="Events: Should fire Approval event properly">
    </testcase>
  </testsuite>
  <testsuite name="Contract: RRC20Factory" timestamp="2021-09-20T14:05:52" tests="1" file="/Users/jjtechera/Documents/GitHub/rskj-truffle-tests/test/token/rrc20/rrc20Factory.js" time="0.1270" failures="0">
    <testcase name="Contract: RRC20Factory Verify a Human Standard Token once deployed using both verification functions." time="0.1270" classname="Verify a Human Standard Token once deployed using both verification functions.">
    </testcase>
  </testsuite>
</testsuites>